<?php
/**
 * Vue de l'onglet traitement des af
 * @author  matthieu.napoli
 * @package AF
 */
/** @var $af AF_Model_AF */
$af = $this->af;


// Algo principal
$algoMainCollapse = new UI_HTML_Collapse('algoMainCollapse');
$algoMainCollapse->foldedByDefault = true;
$algoMainCollapse->title = __('AF', 'configTreatmentCollapse', 'executionAlgorithmCollapse');
$algoMainForm = new UI_Form('mainAlgo');
$algoMainForm->setAction('af/edit/algo-main-submit/id/' . $af->getId());
$algoMainExpression = new UI_Form_Element_Textarea('expression');
$algoMainExpression->setLabel('Expression');
$algoMainExpression->setAttrib('rows', '5');
/** @var $algo Algo_Model_Selection_Main */
$mainAlgo = $af->getMainAlgo();
if ($mainAlgo->getExpression()) {
    $algoMainExpression->setValue($mainAlgo->getExpression());
}
$algoMainForm->addElement($algoMainExpression);
$algoMainForm->addSubmitButton();
$algoMainCollapse->body = $algoMainForm->render();
echo $algoMainCollapse->render();


// Algorithmes numériques
$algoNumericCollapse = new UI_HTML_Collapse('algoNumericCollapse');
$algoNumericCollapse->foldedByDefault = true;
$algoNumericCollapse->title = __('AF', 'configTreatmentCollapse', 'numericAlgorithmCollapse');

// Numeric expression
$algoNumericExpressionCollapse = new UI_HTML_Collapse('algoNumericExpressionCollapse');
$algoNumericExpressionCollapse->foldedByDefault = true;
$algoNumericExpressionCollapse->title = __('TEC', 'name', 'expressions');
$algoNumericExpressionCollapse->body = $this->partial('edit/algos/numeric-expression.phtml', array('af' => $af));
// Parameter
$algoNumericParameterCollapse = new UI_HTML_Collapse('algoNumericParameterCollapse');
$algoNumericParameterCollapse->foldedByDefault = true;
$algoNumericParameterCollapse->title = __('UI', 'name', 'parameters');
$algoNumericParameterCollapse->body = $this->partial('edit/algos/numeric-parameter.phtml', array('af' => $af));
// Constantes
$algoNumericConstantCollapse = new UI_HTML_Collapse('algoNumericConstantCollapse');
$algoNumericConstantCollapse->foldedByDefault = true;
$algoNumericConstantCollapse->title = __('UI', 'name', 'constants');
$algoNumericConstantCollapse->body = $this->partial('edit/algos/numeric-constant.phtml', array('af' => $af));
// Numeric input
$algoNumericInputCollapse = new UI_HTML_Collapse('algoNumericInputCollapse');
$algoNumericInputCollapse->foldedByDefault = true;
$algoNumericInputCollapse->title = __('AF', 'configTreatmentCollapse', 'numericInputCollapse');
$algoNumericInputCollapse->body = $this->partial('edit/algos/numeric-input.phtml',
                                                 ['af' => $af, 'numericInputList' => $this->numericInputList]);

$algoNumericCollapse->body = $algoNumericExpressionCollapse->render()
    . $algoNumericParameterCollapse->render()
    . $algoNumericConstantCollapse->render()
    . $algoNumericInputCollapse->render();
echo $algoNumericCollapse->render();


// Algorithmes de sélection
$algoSelectionTextKeyCollapse = new UI_HTML_Collapse('algoSelectionTextKeyCollapse');
$algoSelectionTextKeyCollapse->foldedByDefault = true;
$algoSelectionTextKeyCollapse->title = __('AF', 'configTreatmentCollapse', 'textkeySelectionAlgorithmCollapse');

// Algorithmes de sélection de type "Expression"
$algoSelectionTextKeyExpressionCollapse = new UI_HTML_Collapse('algoSelectionTextKeyExpressionCollapse');
$algoSelectionTextKeyExpressionCollapse->foldedByDefault = true;
$algoSelectionTextKeyExpressionCollapse->title = __('TEC', 'name', 'expressions');
$algoSelectionTextKeyExpressionCollapse->body = $this->partial('edit/algos/selection-textkey-expression.phtml',
                                                               ['af' => $af]);

// Algorithmes de sélection à partir d'une saisie de champ de sélection simple
$algoSelectionTextKeyInputCollapse = new UI_HTML_Collapse('algoSelectionTextKeyInputCollapse');
$algoSelectionTextKeyInputCollapse->foldedByDefault = true;
$algoSelectionTextKeyInputCollapse->title = __('AF', 'configTreatmentCollapse', 'inputTextkeySelectionCollapse');
$algoSelectionTextKeyInputCollapse->body = $this->partial('edit/algos/selection-textkey-input.phtml',
                                                          ['af' => $af]);

// Algorithmes de sélection de type "ContextValue"
$algoSelectionTextKeyContextValueCollapse = new UI_HTML_Collapse('algoSelectionTextKeyContextValueCollapse');
$algoSelectionTextKeyContextValueCollapse->foldedByDefault = true;
$algoSelectionTextKeyContextValueCollapse->title = __('AF', 'configTreatmentCollapse', 'orgaCoordinateTextkeySelectionCollapse');
$algoSelectionTextKeyContextValueCollapse->body = $this->partial('edit/algos/selection-textkey-context-value.phtml',
    ['af' => $af]);

$algoSelectionTextKeyCollapse->body = $algoSelectionTextKeyExpressionCollapse->render()
    . $algoSelectionTextKeyInputCollapse->render()
    . $algoSelectionTextKeyContextValueCollapse->render();
echo $algoSelectionTextKeyCollapse->render();


// Conditions
$algoConditionCollapse = new UI_HTML_Collapse('algoConditionCollapse');
$algoConditionCollapse->foldedByDefault = true;
$algoConditionCollapse->title = __('UI', 'name', 'conditions');

// Conditions composées
$algoConditionExpressionCollapse = new UI_HTML_Collapse('algoConditionExpressionCollapse');
$algoConditionExpressionCollapse->foldedByDefault = true;
$algoConditionExpressionCollapse->title = __('AF', 'configInteractionCollapse', 'composedConditionCollapse');
$algoConditionExpressionCollapse->body = $this->partial('edit/algos/condition-expression.phtml', ['af' => $af]);

// Conditions élémentaires
$algoConditionElementaryCollapse = new UI_HTML_Collapse('algoConditionElementaryCollapse');
$algoConditionElementaryCollapse->foldedByDefault = true;
$algoConditionElementaryCollapse->title = __('AF', 'configInteractionCollapse', 'elementaryConditionCollapse');
$algoConditionElementaryCollapse->body = $this->partial('edit/algos/condition-elementary.phtml',
                                                        ['af' => $af, 'fieldList' => $this->fieldList]);

$algoConditionCollapse->body = $algoConditionExpressionCollapse->render()
    . $algoConditionElementaryCollapse->render();
echo $algoConditionCollapse->render();
?>

<script>
    $('#algoNumericExpressionCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoNumericExpressionCollapse_wrapper') {
            algoNumericExpression.filter();
        }
    });
    $('#algoNumericParameterCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoNumericParameterCollapse_wrapper') {
            algoNumericParameter.filter();
        }
    });
    $('#algoNumericConstantCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoNumericConstantCollapse_wrapper') {
            algoNumericConstant.filter();
        }
    });
    $('#algoNumericInputCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoNumericInputCollapse_wrapper') {
            algoNumericInput.filter();
        }
    });
    $('#algoSelectionTextKeyExpressionCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoSelectionTextKeyExpressionCollapse_wrapper') {
            algoSelectionTextkeyExpression.filter();
        }
    });
    $('#algoSelectionTextKeyInputCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoSelectionTextKeyInputCollapse_wrapper') {
            algoSelectionTextkeyInput.filter();
        }
    });
    $('#algoSelectionTextKeyContextValueCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoSelectionTextKeyContextValueCollapse_wrapper') {
            algoSelectionTextkeyContextValue.filter();
        }
    });
    $('#algoConditionExpressionCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoConditionExpressionCollapse_wrapper') {
            algoConditionExpression.filter();
        }
    });
    $('#algoConditionElementaryCollapse').on('show', function(e) {
        if ($(e.target).attr('id') == 'algoConditionElementaryCollapse_wrapper') {
            algoConditionElementary.filter();
        }
    });
</script>
