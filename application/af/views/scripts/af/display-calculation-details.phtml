<?php
/**
 * @author  matthieu.napoli
 * @package AF
 */

/** @var $af AF_Model_AF */
$af = $this->af;
/** @var $inputSet AF_Model_InputSet_Primary|null */
$inputSet = $this->inputSet;
/** @var $outputSet AF_Model_Output_OutputSet|null */
$outputSet = $inputSet ? $inputSet->getOutputSet() : null;

UI_Datagrid::addHeader();

if (!$inputSet || !$inputSet->isInputComplete()) {
    echo '<p>' . __('AF', 'inputInput', 'incompleteInput') . '</p>';
    return;
}

if (!$inputSet->isCalculationComplete()) {
    echo '<p>' . __('AF', 'inputInput', 'completeInputIncompleteCalculations') . '</p>';
    return;
}

if ($outputSet && count($outputSet->getIndicators()) == 0) {
    echo '<p>' . __('AF', 'inputInput', 'completeInputNoResult') . '</p>';
    return;
}

displayAF($af, $inputSet, __('AF', 'inputDocumentation', 'masterForm'));

/**
 * @param AF_Model_AF       $af
 * @param AF_Model_InputSet $inputSet
 * @param string            $title
 * @param string            $refPrefix
 * @return UI_HTML_Collapse
 */
function displayAF(AF_Model_AF $af, AF_Model_InputSet $inputSet, $title, $refPrefix = '')
{
    $collapse = new UI_HTML_Collapse($refPrefix . $af->getRef(), $title);
    $collapse->foldedByDefault = true;

    /** @var $mainAlgo Algo_Model_Selection_Main */
    $mainAlgo = $af->getAlgoByRef(AF_Model_AF::ALGO_MAIN_REF);
    $subAlgos = $mainAlgo->getSelectedNumericAlgos($inputSet);

    foreach ($subAlgos as $subAlgo) {
        $algoCollapse = displayAlgo($subAlgo, $inputSet, $refPrefix . $af->getRef() . UI_Generic::REF_SEPARATOR);
        $collapse->body .= $algoCollapse->render();
    }

    if (count($subAlgos) > 0) {
        echo $collapse->render();
    }

    // Sub-AF
    foreach (getSubAFInputSets($inputSet) as $array) {
        /** @var $subInputSet AF_Model_InputSet_Sub */
        $subInputSet = $array['subInputSet'];
        $componentRef = $array['componentRef'];

        $newRefPrefix = $refPrefix . $af->getRef() . UI_Generic::REF_SEPARATOR
            . $componentRef . UI_Generic::REF_SEPARATOR;
        if (isset($array['number'])) {
            $newRefPrefix .= $array['number'] . UI_Generic::REF_SEPARATOR;
        }

        displayAF($subInputSet->getAF(), $subInputSet, $array['title'], $newRefPrefix);
    }
}


/**
 * @param AF_Model_InputSet $inputSet
 * @return AF_Model_InputSet_Sub[]
 */
function getSubAFInputSets(AF_Model_InputSet $inputSet)
{
    $subAFInputSets = [];
    foreach ($inputSet->getInputs() as $input) {
        if ($input->isHidden()) {
            continue;
        }
        if ($input instanceof AF_Model_Input_SubAF_NotRepeated) {
            $subInputSet = $input->getValue();
            $subAFInputSets[] = array(
                'title'        => $input->getComponent()->getLabel(),
                'subInputSet'  => $subInputSet,
                'componentRef' => $input->getRef(),
            );
            $subAFInputSets = array_merge($subAFInputSets, getSubAFInputSets($subInputSet));
        }
        if ($input instanceof AF_Model_Input_SubAF_Repeated) {
            $subInputSets = $input->getValue();
            foreach ($subInputSets as $number => $subInputSet) {
                $title = $input->getComponent()->getLabel() . " #" . ($number + 1);
                if ($subInputSet->getFreeLabel()) {
                    $title .= " - " . $subInputSet->getFreeLabel();
                }
                $subAFInputSets[] = array(
                    'title'        => $title,
                    'subInputSet'  => $subInputSet,
                    'number'       => $number,
                    'componentRef' => $input->getRef(),
                );
                $subAFInputSets = array_merge($subAFInputSets, getSubAFInputSets($subInputSet));
            }
        }
    }
    return $subAFInputSets;
}


/**
 * @param Algo_Model_Algo   $algo
 * @param AF_Model_InputSet $inputSet
 * @param string            $refPrefix
 * @return UI_HTML_Collapse
 */
function displayAlgo(Algo_Model_Algo $algo, AF_Model_InputSet $inputSet, $refPrefix = '')
{
    $view = Zend_Controller_Action_HelperBroker::getStaticHelper('Layout')->getView();

    $locale = Core_Locale::loadDefault();
    $title = $algo->getRef();
    if ($algo instanceof Algo_Model_Numeric) {
        $title .= " <small>" . $algo->getLabel() . "</small>";
    }
    $collapse = new UI_HTML_Collapse($refPrefix . $algo->getRef(), $title);
    $collapse->foldedByDefault = true;

    // Type
    switch(get_class($algo)) {
        case 'Algo_Model_Numeric_Input':
            $type = __('UI', 'name', 'input');
            break;
        case 'Algo_Model_Numeric_Expression':
            $type = __('TEC', 'name', 'expression');
            break;
        case 'Algo_Model_Numeric_Constant':
            $type = __('UI', 'name', 'constant');
            break;
        case 'Algo_Model_Numeric_Parameter':
            $type = __('UI', 'name', 'parameter');
            break;
        default:
            $type = get_class($algo);
    }
    $collapse->body .= "<p><strong>" . __('UI', 'name', 'type') . __('UI', 'other', ':') . "</strong> $type</p>";

    // Champ de saisie
    if ($algo instanceof Algo_Model_Numeric_Input) {
        $collapse->body .= "<p><strong>" . __('UI', 'name', 'field')  . __('UI', 'other', ':')
            . "</strong> {$algo->getLabel()}</p>";
    }

    // Paramètre
    if ($algo instanceof Algo_Model_Numeric_Parameter) {
        $family = $algo->getFamily();
        $collapse->body .= '<p>';
        $collapse->body .= '<strong>' . __('Techno', 'name', 'family') . __('UI', 'other', ':') . '</strong>';
        $collapse->body .= '<a href="' . $view->baseUrl('techno/family/details/id/' . $family->getId()) . '">'
            . $family->getLabel() . "</a>";
        $collapse->body .= '</p>';
        $collapse->body .= '<ul>';
        foreach ($algo->getParameterCoordinates() as $parameterCoordinate) {
            $collapse->body .= '<li>';
            $collapse->body .= ucfirst($parameterCoordinate->getDimension()->getLabel())
                . __('UI', 'other', ':')
                . $parameterCoordinate->getMemberKeyword($inputSet)->getLabel();
            $collapse->body .= '</li>';
        }
        $collapse->body .= '</ul>';
    }

    // Expression
    if ($algo instanceof Algo_Model_Numeric_Expression) {
        $url = $view->url([
                          'module' => 'af',
                          'controller' => 'af',
                          'action' => 'popup-expression-graph',
                          'id' => $algo->getId(),
                          ]);
        $popup = new UI_Popup_Ajax('graph_' . $algo->getId(), $url);
        $popup->title = $algo->getRef();
        if ($algo->getLabel()) {
            $popup->title .= ' (' . $algo->getLabel() . ')';
        }
        $popup->addAttribute('class', 'large');
        $collapse->body .= $popup->render();
        $helper = new UI_View_Helper_Button();
        $buttonHTML = $helper->button("", 'zoom-in', ['class' => 'btn-mini'])
            ->showPopup('graph_' . $algo->getId());
        $expression = $algo->getExpression();
        $collapse->body .= "<p><strong>" . __('TEC', 'name', 'expression') . __('UI', 'other', ':')
            . "</strong> $buttonHTML <code>$expression</code></p>";
    }

    // Valeur
    if ($algo instanceof Algo_Model_Numeric) {
        $value = $algo->execute($inputSet);
        $stringValue = $locale->formatNumber($value->getDigitalValue(), 20)
            . ' <strong>' . $value->getUnit()->getSymbol() . '</strong> ± '
            . $locale->formatNumber($value->getRelativeUncertainty()) . ' <strong>%</strong>';
        $collapse->body .= "<p><strong>" . __('UI', 'name', 'value') . __('UI', 'other', ':')
            . "</strong> $stringValue</p>";
    }

    // Opérandes de l'expression
    if ($algo instanceof Algo_Model_Numeric_Expression) {
        // Opérandes de l'expression
        foreach ($algo->getSubAlgos() as $subAlgo) {
            $collapse->body .= displayAlgo($subAlgo, $inputSet,
                                           $refPrefix . $algo->getRef() . UI_Generic::REF_SEPARATOR)->render();
        }
    }

    return $collapse;
}
